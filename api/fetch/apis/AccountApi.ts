// tslint:disable
/**
 * stock-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountToJSON,
    AccountToken,
    AccountTokenFromJSON,
    AccountTokenToJSON,
    EntreeSortie,
    EntreeSortieFromJSON,
    EntreeSortieToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    Produit,
    ProduitFromJSON,
    ProduitToJSON,
    Role,
    RoleFromJSON,
    RoleToJSON,
    RoleMapping,
    RoleMappingFromJSON,
    RoleMappingToJSON,
    UNKNOWN_BASE_TYPE,
    UNKNOWN_BASE_TYPEFromJSON,
    UNKNOWN_BASE_TYPEToJSON,
} from '../models';

export interface AccountChangePasswordRequest {
    UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE;
}

export interface AccountConfirmRequest {
    uid: string;
    token: string;
    redirect?: string;
}

export interface AccountCountRequest {
    where?: string;
}

export interface AccountCreateRequest {
    data?: Account;
}

export interface AccountCreateChangeStreamGetAccountsChangeStreamRequest {
    options?: string;
}

export interface AccountCreateChangeStreamPostAccountsChangeStreamRequest {
    UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE;
}

export interface AccountDeleteByIdRequest {
    id: string;
}

export interface AccountExistsGetAccountsidExistsRequest {
    id: string;
}

export interface AccountExistsHeadAccountsidRequest {
    id: string;
}

export interface AccountFindRequest {
    filter?: string;
}

export interface AccountFindByIdRequest {
    id: string;
    filter?: string;
}

export interface AccountFindOneRequest {
    filter?: string;
}

export interface AccountLoginRequest {
    credentials: object;
    include?: string;
}

export interface AccountPatchOrCreateRequest {
    data?: Account;
}

export interface AccountPrototypeCountAccessTokensRequest {
    id: string;
    where?: string;
}

export interface AccountPrototypeCountEntreeSortiesRequest {
    id: string;
    where?: string;
}

export interface AccountPrototypeCountProduitsRequest {
    id: string;
    where?: string;
}

export interface AccountPrototypeCountRolesRequest {
    id: string;
    where?: string;
}

export interface AccountPrototypeCreateAccessTokensRequest {
    id: string;
    data?: AccountToken;
}

export interface AccountPrototypeCreateEntreeSortiesRequest {
    id: string;
    data?: EntreeSortie;
}

export interface AccountPrototypeCreateProduitsRequest {
    id: string;
    data?: Produit;
}

export interface AccountPrototypeCreateRolesRequest {
    id: string;
    data?: Role;
}

export interface AccountPrototypeDeleteAccessTokensRequest {
    id: string;
}

export interface AccountPrototypeDeleteEntreeSortiesRequest {
    id: string;
}

export interface AccountPrototypeDeleteProduitsRequest {
    id: string;
}

export interface AccountPrototypeDeleteRolesRequest {
    id: string;
}

export interface AccountPrototypeDestroyByIdAccessTokensRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeDestroyByIdEntreeSortiesRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeDestroyByIdProduitsRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeDestroyByIdRolesRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeExistsRolesRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeFindByIdAccessTokensRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeFindByIdEntreeSortiesRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeFindByIdProduitsRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeFindByIdRolesRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeGetAccessTokensRequest {
    id: string;
    filter?: string;
}

export interface AccountPrototypeGetEntreeSortiesRequest {
    id: string;
    filter?: string;
}

export interface AccountPrototypeGetProduitsRequest {
    id: string;
    filter?: string;
}

export interface AccountPrototypeGetRolesRequest {
    id: string;
    filter?: string;
}

export interface AccountPrototypeLinkRolesRequest {
    id: string;
    fk: string;
    data?: RoleMapping;
}

export interface AccountPrototypePatchAttributesRequest {
    id: string;
    data?: Account;
}

export interface AccountPrototypeUnlinkRolesRequest {
    id: string;
    fk: string;
}

export interface AccountPrototypeUpdateByIdAccessTokensRequest {
    id: string;
    fk: string;
    data?: AccountToken;
}

export interface AccountPrototypeUpdateByIdEntreeSortiesRequest {
    id: string;
    fk: string;
    data?: EntreeSortie;
}

export interface AccountPrototypeUpdateByIdProduitsRequest {
    id: string;
    fk: string;
    data?: Produit;
}

export interface AccountPrototypeUpdateByIdRolesRequest {
    id: string;
    fk: string;
    data?: Role;
}

export interface AccountPrototypeVerifyRequest {
    id: string;
}

export interface AccountReplaceByIdPostAccountsidReplaceRequest {
    id: string;
    data?: Account;
}

export interface AccountReplaceByIdPutAccountsidRequest {
    id: string;
    data?: Account;
}

export interface AccountReplaceOrCreatePostAccountsReplaceOrCreateRequest {
    data?: Account;
}

export interface AccountReplaceOrCreatePutAccountsRequest {
    data?: Account;
}

export interface AccountResetPasswordRequest {
    options: object;
}

export interface AccountSetPasswordRequest {
    UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE;
}

export interface AccountUpdateAllRequest {
    where?: string;
    data?: Account;
}

export interface AccountUpsertWithWhereRequest {
    where?: string;
    data?: Account;
}

/**
 * no description
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Change a user\'s password.
     */
    async accountChangePasswordRaw(requestParameters: AccountChangePasswordRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_BASE_TYPE === null || requestParameters.UNKNOWN_BASE_TYPE === undefined) {
            throw new runtime.RequiredError('UNKNOWN_BASE_TYPE','Required parameter requestParameters.UNKNOWN_BASE_TYPE was null or undefined when calling accountChangePassword.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.UNKNOWN_BASE_TYPE),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change a user\'s password.
     */
    async accountChangePassword(requestParameters: AccountChangePasswordRequest): Promise<void> {
        await this.accountChangePasswordRaw(requestParameters);
    }

    /**
     * Confirm a user registration with identity verification token.
     */
    async accountConfirmRaw(requestParameters: AccountConfirmRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling accountConfirm.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling accountConfirm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        if (requestParameters.redirect !== undefined) {
            queryParameters['redirect'] = requestParameters.redirect;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/confirm`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Confirm a user registration with identity verification token.
     */
    async accountConfirm(requestParameters: AccountConfirmRequest): Promise<void> {
        await this.accountConfirmRaw(requestParameters);
    }

    /**
     * Count instances of the model matched by where from the data source.
     */
    async accountCountRaw(requestParameters: AccountCountRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Count instances of the model matched by where from the data source.
     */
    async accountCount(requestParameters: AccountCountRequest): Promise<InlineResponse200> {
        const response = await this.accountCountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     */
    async accountCreateRaw(requestParameters: AccountCreateRequest): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     */
    async accountCreate(requestParameters: AccountCreateRequest): Promise<Account> {
        const response = await this.accountCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a change stream.
     */
    async accountCreateChangeStreamGetAccountsChangeStreamRaw(requestParameters: AccountCreateChangeStreamGetAccountsChangeStreamRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.options !== undefined) {
            queryParameters['options'] = requestParameters.options;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/change-stream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Create a change stream.
     */
    async accountCreateChangeStreamGetAccountsChangeStream(requestParameters: AccountCreateChangeStreamGetAccountsChangeStreamRequest): Promise<Blob> {
        const response = await this.accountCreateChangeStreamGetAccountsChangeStreamRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a change stream.
     */
    async accountCreateChangeStreamPostAccountsChangeStreamRaw(requestParameters: AccountCreateChangeStreamPostAccountsChangeStreamRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/change-stream`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.UNKNOWN_BASE_TYPE),
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Create a change stream.
     */
    async accountCreateChangeStreamPostAccountsChangeStream(requestParameters: AccountCreateChangeStreamPostAccountsChangeStreamRequest): Promise<Blob> {
        const response = await this.accountCreateChangeStreamPostAccountsChangeStreamRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     */
    async accountDeleteByIdRaw(requestParameters: AccountDeleteByIdRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountDeleteById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     */
    async accountDeleteById(requestParameters: AccountDeleteByIdRequest): Promise<object> {
        const response = await this.accountDeleteByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check whether a model instance exists in the data source.
     */
    async accountExistsGetAccountsidExistsRaw(requestParameters: AccountExistsGetAccountsidExistsRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountExistsGetAccountsidExists.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/exists`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Check whether a model instance exists in the data source.
     */
    async accountExistsGetAccountsidExists(requestParameters: AccountExistsGetAccountsidExistsRequest): Promise<InlineResponse2001> {
        const response = await this.accountExistsGetAccountsidExistsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check whether a model instance exists in the data source.
     */
    async accountExistsHeadAccountsidRaw(requestParameters: AccountExistsHeadAccountsidRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountExistsHeadAccountsid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Check whether a model instance exists in the data source.
     */
    async accountExistsHeadAccountsid(requestParameters: AccountExistsHeadAccountsidRequest): Promise<InlineResponse2001> {
        const response = await this.accountExistsHeadAccountsidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     */
    async accountFindRaw(requestParameters: AccountFindRequest): Promise<runtime.ApiResponse<Array<Account>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountFromJSON));
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     */
    async accountFind(requestParameters: AccountFindRequest): Promise<Array<Account>> {
        const response = await this.accountFindRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find a model instance by {{id}} from the data source.
     */
    async accountFindByIdRaw(requestParameters: AccountFindByIdRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountFindById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Find a model instance by {{id}} from the data source.
     */
    async accountFindById(requestParameters: AccountFindByIdRequest): Promise<Account> {
        const response = await this.accountFindByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     */
    async accountFindOneRaw(requestParameters: AccountFindOneRequest): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/findOne`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     */
    async accountFindOne(requestParameters: AccountFindOneRequest): Promise<Account> {
        const response = await this.accountFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Login a user with username/email and password.
     */
    async accountLoginRaw(requestParameters: AccountLoginRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.credentials === null || requestParameters.credentials === undefined) {
            throw new runtime.RequiredError('credentials','Required parameter requestParameters.credentials was null or undefined when calling accountLogin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.credentials as any,
        });

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Login a user with username/email and password.
     */
    async accountLogin(requestParameters: AccountLoginRequest): Promise<AccountToken> {
        const response = await this.accountLoginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Logout a user with access token.
     */
    async accountLogoutRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout a user with access token.
     */
    async accountLogout(): Promise<void> {
        await this.accountLogoutRaw();
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     */
    async accountPatchOrCreateRaw(requestParameters: AccountPatchOrCreateRequest): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     */
    async accountPatchOrCreate(requestParameters: AccountPatchOrCreateRequest): Promise<Account> {
        const response = await this.accountPatchOrCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Compte accessTokens de Account.
     */
    async accountPrototypeCountAccessTokensRaw(requestParameters: AccountPrototypeCountAccessTokensRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeCountAccessTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/accessTokens/count`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Compte accessTokens de Account.
     */
    async accountPrototypeCountAccessTokens(requestParameters: AccountPrototypeCountAccessTokensRequest): Promise<InlineResponse200> {
        const response = await this.accountPrototypeCountAccessTokensRaw(requestParameters);
        return await response.value();
    }

    /**
     * Compte entreeSorties de Account.
     */
    async accountPrototypeCountEntreeSortiesRaw(requestParameters: AccountPrototypeCountEntreeSortiesRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeCountEntreeSorties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/entreeSorties/count`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Compte entreeSorties de Account.
     */
    async accountPrototypeCountEntreeSorties(requestParameters: AccountPrototypeCountEntreeSortiesRequest): Promise<InlineResponse200> {
        const response = await this.accountPrototypeCountEntreeSortiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Compte produits de Account.
     */
    async accountPrototypeCountProduitsRaw(requestParameters: AccountPrototypeCountProduitsRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeCountProduits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/produits/count`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Compte produits de Account.
     */
    async accountPrototypeCountProduits(requestParameters: AccountPrototypeCountProduitsRequest): Promise<InlineResponse200> {
        const response = await this.accountPrototypeCountProduitsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Compte roles de Account.
     */
    async accountPrototypeCountRolesRaw(requestParameters: AccountPrototypeCountRolesRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeCountRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/roles/count`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Compte roles de Account.
     */
    async accountPrototypeCountRoles(requestParameters: AccountPrototypeCountRolesRequest): Promise<InlineResponse200> {
        const response = await this.accountPrototypeCountRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Crée une instance dans accessTokens de ce modèle.
     */
    async accountPrototypeCreateAccessTokensRaw(requestParameters: AccountPrototypeCreateAccessTokensRequest): Promise<runtime.ApiResponse<AccountToken>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeCreateAccessTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/accessTokens`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountTokenToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountTokenFromJSON(jsonValue));
    }

    /**
     * Crée une instance dans accessTokens de ce modèle.
     */
    async accountPrototypeCreateAccessTokens(requestParameters: AccountPrototypeCreateAccessTokensRequest): Promise<AccountToken> {
        const response = await this.accountPrototypeCreateAccessTokensRaw(requestParameters);
        return await response.value();
    }

    /**
     * Crée une instance dans entreeSorties de ce modèle.
     */
    async accountPrototypeCreateEntreeSortiesRaw(requestParameters: AccountPrototypeCreateEntreeSortiesRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeCreateEntreeSorties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/entreeSorties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Crée une instance dans entreeSorties de ce modèle.
     */
    async accountPrototypeCreateEntreeSorties(requestParameters: AccountPrototypeCreateEntreeSortiesRequest): Promise<EntreeSortie> {
        const response = await this.accountPrototypeCreateEntreeSortiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Crée une instance dans produits de ce modèle.
     */
    async accountPrototypeCreateProduitsRaw(requestParameters: AccountPrototypeCreateProduitsRequest): Promise<runtime.ApiResponse<Produit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeCreateProduits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/produits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProduitToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProduitFromJSON(jsonValue));
    }

    /**
     * Crée une instance dans produits de ce modèle.
     */
    async accountPrototypeCreateProduits(requestParameters: AccountPrototypeCreateProduitsRequest): Promise<Produit> {
        const response = await this.accountPrototypeCreateProduitsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Crée une instance dans roles de ce modèle.
     */
    async accountPrototypeCreateRolesRaw(requestParameters: AccountPrototypeCreateRolesRequest): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeCreateRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Crée une instance dans roles de ce modèle.
     */
    async accountPrototypeCreateRoles(requestParameters: AccountPrototypeCreateRolesRequest): Promise<Role> {
        const response = await this.accountPrototypeCreateRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Supprime tous les accessTokens de ce modèle.
     */
    async accountPrototypeDeleteAccessTokensRaw(requestParameters: AccountPrototypeDeleteAccessTokensRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeDeleteAccessTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/accessTokens`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprime tous les accessTokens de ce modèle.
     */
    async accountPrototypeDeleteAccessTokens(requestParameters: AccountPrototypeDeleteAccessTokensRequest): Promise<void> {
        await this.accountPrototypeDeleteAccessTokensRaw(requestParameters);
    }

    /**
     * Supprime tous les entreeSorties de ce modèle.
     */
    async accountPrototypeDeleteEntreeSortiesRaw(requestParameters: AccountPrototypeDeleteEntreeSortiesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeDeleteEntreeSorties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/entreeSorties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprime tous les entreeSorties de ce modèle.
     */
    async accountPrototypeDeleteEntreeSorties(requestParameters: AccountPrototypeDeleteEntreeSortiesRequest): Promise<void> {
        await this.accountPrototypeDeleteEntreeSortiesRaw(requestParameters);
    }

    /**
     * Supprime tous les produits de ce modèle.
     */
    async accountPrototypeDeleteProduitsRaw(requestParameters: AccountPrototypeDeleteProduitsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeDeleteProduits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/produits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprime tous les produits de ce modèle.
     */
    async accountPrototypeDeleteProduits(requestParameters: AccountPrototypeDeleteProduitsRequest): Promise<void> {
        await this.accountPrototypeDeleteProduitsRaw(requestParameters);
    }

    /**
     * Supprime tous les roles de ce modèle.
     */
    async accountPrototypeDeleteRolesRaw(requestParameters: AccountPrototypeDeleteRolesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeDeleteRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprime tous les roles de ce modèle.
     */
    async accountPrototypeDeleteRoles(requestParameters: AccountPrototypeDeleteRolesRequest): Promise<void> {
        await this.accountPrototypeDeleteRolesRaw(requestParameters);
    }

    /**
     * Supprimez un élément lié par id pour accessTokens.
     */
    async accountPrototypeDestroyByIdAccessTokensRaw(requestParameters: AccountPrototypeDestroyByIdAccessTokensRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeDestroyByIdAccessTokens.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeDestroyByIdAccessTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/accessTokens/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprimez un élément lié par id pour accessTokens.
     */
    async accountPrototypeDestroyByIdAccessTokens(requestParameters: AccountPrototypeDestroyByIdAccessTokensRequest): Promise<void> {
        await this.accountPrototypeDestroyByIdAccessTokensRaw(requestParameters);
    }

    /**
     * Supprimez un élément lié par id pour entreeSorties.
     */
    async accountPrototypeDestroyByIdEntreeSortiesRaw(requestParameters: AccountPrototypeDestroyByIdEntreeSortiesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeDestroyByIdEntreeSorties.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeDestroyByIdEntreeSorties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/entreeSorties/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprimez un élément lié par id pour entreeSorties.
     */
    async accountPrototypeDestroyByIdEntreeSorties(requestParameters: AccountPrototypeDestroyByIdEntreeSortiesRequest): Promise<void> {
        await this.accountPrototypeDestroyByIdEntreeSortiesRaw(requestParameters);
    }

    /**
     * Supprimez un élément lié par id pour produits.
     */
    async accountPrototypeDestroyByIdProduitsRaw(requestParameters: AccountPrototypeDestroyByIdProduitsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeDestroyByIdProduits.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeDestroyByIdProduits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/produits/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprimez un élément lié par id pour produits.
     */
    async accountPrototypeDestroyByIdProduits(requestParameters: AccountPrototypeDestroyByIdProduitsRequest): Promise<void> {
        await this.accountPrototypeDestroyByIdProduitsRaw(requestParameters);
    }

    /**
     * Supprimez un élément lié par id pour roles.
     */
    async accountPrototypeDestroyByIdRolesRaw(requestParameters: AccountPrototypeDestroyByIdRolesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeDestroyByIdRoles.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeDestroyByIdRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/roles/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprimez un élément lié par id pour roles.
     */
    async accountPrototypeDestroyByIdRoles(requestParameters: AccountPrototypeDestroyByIdRolesRequest): Promise<void> {
        await this.accountPrototypeDestroyByIdRolesRaw(requestParameters);
    }

    /**
     * Vérifiez l\'existence de la relation roles à un élément par id.
     */
    async accountPrototypeExistsRolesRaw(requestParameters: AccountPrototypeExistsRolesRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeExistsRoles.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeExistsRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/roles/rel/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Vérifiez l\'existence de la relation roles à un élément par id.
     */
    async accountPrototypeExistsRoles(requestParameters: AccountPrototypeExistsRolesRequest): Promise<boolean> {
        const response = await this.accountPrototypeExistsRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Recherchez un élément lié par id pour accessTokens.
     */
    async accountPrototypeFindByIdAccessTokensRaw(requestParameters: AccountPrototypeFindByIdAccessTokensRequest): Promise<runtime.ApiResponse<AccountToken>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeFindByIdAccessTokens.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeFindByIdAccessTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/accessTokens/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountTokenFromJSON(jsonValue));
    }

    /**
     * Recherchez un élément lié par id pour accessTokens.
     */
    async accountPrototypeFindByIdAccessTokens(requestParameters: AccountPrototypeFindByIdAccessTokensRequest): Promise<AccountToken> {
        const response = await this.accountPrototypeFindByIdAccessTokensRaw(requestParameters);
        return await response.value();
    }

    /**
     * Recherchez un élément lié par id pour entreeSorties.
     */
    async accountPrototypeFindByIdEntreeSortiesRaw(requestParameters: AccountPrototypeFindByIdEntreeSortiesRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeFindByIdEntreeSorties.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeFindByIdEntreeSorties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/entreeSorties/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Recherchez un élément lié par id pour entreeSorties.
     */
    async accountPrototypeFindByIdEntreeSorties(requestParameters: AccountPrototypeFindByIdEntreeSortiesRequest): Promise<EntreeSortie> {
        const response = await this.accountPrototypeFindByIdEntreeSortiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Recherchez un élément lié par id pour produits.
     */
    async accountPrototypeFindByIdProduitsRaw(requestParameters: AccountPrototypeFindByIdProduitsRequest): Promise<runtime.ApiResponse<Produit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeFindByIdProduits.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeFindByIdProduits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/produits/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProduitFromJSON(jsonValue));
    }

    /**
     * Recherchez un élément lié par id pour produits.
     */
    async accountPrototypeFindByIdProduits(requestParameters: AccountPrototypeFindByIdProduitsRequest): Promise<Produit> {
        const response = await this.accountPrototypeFindByIdProduitsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Recherchez un élément lié par id pour roles.
     */
    async accountPrototypeFindByIdRolesRaw(requestParameters: AccountPrototypeFindByIdRolesRequest): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeFindByIdRoles.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeFindByIdRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/roles/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Recherchez un élément lié par id pour roles.
     */
    async accountPrototypeFindByIdRoles(requestParameters: AccountPrototypeFindByIdRolesRequest): Promise<Role> {
        const response = await this.accountPrototypeFindByIdRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Demandes accessTokens de Account.
     */
    async accountPrototypeGetAccessTokensRaw(requestParameters: AccountPrototypeGetAccessTokensRequest): Promise<runtime.ApiResponse<Array<AccountToken>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeGetAccessTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/accessTokens`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountTokenFromJSON));
    }

    /**
     * Demandes accessTokens de Account.
     */
    async accountPrototypeGetAccessTokens(requestParameters: AccountPrototypeGetAccessTokensRequest): Promise<Array<AccountToken>> {
        const response = await this.accountPrototypeGetAccessTokensRaw(requestParameters);
        return await response.value();
    }

    /**
     * Demandes entreeSorties de Account.
     */
    async accountPrototypeGetEntreeSortiesRaw(requestParameters: AccountPrototypeGetEntreeSortiesRequest): Promise<runtime.ApiResponse<Array<EntreeSortie>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeGetEntreeSorties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/entreeSorties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntreeSortieFromJSON));
    }

    /**
     * Demandes entreeSorties de Account.
     */
    async accountPrototypeGetEntreeSorties(requestParameters: AccountPrototypeGetEntreeSortiesRequest): Promise<Array<EntreeSortie>> {
        const response = await this.accountPrototypeGetEntreeSortiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Demandes produits de Account.
     */
    async accountPrototypeGetProduitsRaw(requestParameters: AccountPrototypeGetProduitsRequest): Promise<runtime.ApiResponse<Array<Produit>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeGetProduits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/produits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProduitFromJSON));
    }

    /**
     * Demandes produits de Account.
     */
    async accountPrototypeGetProduits(requestParameters: AccountPrototypeGetProduitsRequest): Promise<Array<Produit>> {
        const response = await this.accountPrototypeGetProduitsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Demandes roles de Account.
     */
    async accountPrototypeGetRolesRaw(requestParameters: AccountPrototypeGetRolesRequest): Promise<runtime.ApiResponse<Array<Role>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeGetRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleFromJSON));
    }

    /**
     * Demandes roles de Account.
     */
    async accountPrototypeGetRoles(requestParameters: AccountPrototypeGetRolesRequest): Promise<Array<Role>> {
        const response = await this.accountPrototypeGetRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Ajoutez un élément lié par id pour roles.
     */
    async accountPrototypeLinkRolesRaw(requestParameters: AccountPrototypeLinkRolesRequest): Promise<runtime.ApiResponse<RoleMapping>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeLinkRoles.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeLinkRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/roles/rel/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleMappingToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleMappingFromJSON(jsonValue));
    }

    /**
     * Ajoutez un élément lié par id pour roles.
     */
    async accountPrototypeLinkRoles(requestParameters: AccountPrototypeLinkRolesRequest): Promise<RoleMapping> {
        const response = await this.accountPrototypeLinkRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     */
    async accountPrototypePatchAttributesRaw(requestParameters: AccountPrototypePatchAttributesRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypePatchAttributes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     */
    async accountPrototypePatchAttributes(requestParameters: AccountPrototypePatchAttributesRequest): Promise<Account> {
        const response = await this.accountPrototypePatchAttributesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Supprimez la relation roles à un élément par id.
     */
    async accountPrototypeUnlinkRolesRaw(requestParameters: AccountPrototypeUnlinkRolesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeUnlinkRoles.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeUnlinkRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/roles/rel/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprimez la relation roles à un élément par id.
     */
    async accountPrototypeUnlinkRoles(requestParameters: AccountPrototypeUnlinkRolesRequest): Promise<void> {
        await this.accountPrototypeUnlinkRolesRaw(requestParameters);
    }

    /**
     * Mettez à jour un élément lié par id pour accessTokens.
     */
    async accountPrototypeUpdateByIdAccessTokensRaw(requestParameters: AccountPrototypeUpdateByIdAccessTokensRequest): Promise<runtime.ApiResponse<AccountToken>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeUpdateByIdAccessTokens.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeUpdateByIdAccessTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/accessTokens/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountTokenToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountTokenFromJSON(jsonValue));
    }

    /**
     * Mettez à jour un élément lié par id pour accessTokens.
     */
    async accountPrototypeUpdateByIdAccessTokens(requestParameters: AccountPrototypeUpdateByIdAccessTokensRequest): Promise<AccountToken> {
        const response = await this.accountPrototypeUpdateByIdAccessTokensRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mettez à jour un élément lié par id pour entreeSorties.
     */
    async accountPrototypeUpdateByIdEntreeSortiesRaw(requestParameters: AccountPrototypeUpdateByIdEntreeSortiesRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeUpdateByIdEntreeSorties.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeUpdateByIdEntreeSorties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/entreeSorties/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Mettez à jour un élément lié par id pour entreeSorties.
     */
    async accountPrototypeUpdateByIdEntreeSorties(requestParameters: AccountPrototypeUpdateByIdEntreeSortiesRequest): Promise<EntreeSortie> {
        const response = await this.accountPrototypeUpdateByIdEntreeSortiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mettez à jour un élément lié par id pour produits.
     */
    async accountPrototypeUpdateByIdProduitsRaw(requestParameters: AccountPrototypeUpdateByIdProduitsRequest): Promise<runtime.ApiResponse<Produit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeUpdateByIdProduits.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeUpdateByIdProduits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/produits/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProduitToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProduitFromJSON(jsonValue));
    }

    /**
     * Mettez à jour un élément lié par id pour produits.
     */
    async accountPrototypeUpdateByIdProduits(requestParameters: AccountPrototypeUpdateByIdProduitsRequest): Promise<Produit> {
        const response = await this.accountPrototypeUpdateByIdProduitsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mettez à jour un élément lié par id pour roles.
     */
    async accountPrototypeUpdateByIdRolesRaw(requestParameters: AccountPrototypeUpdateByIdRolesRequest): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeUpdateByIdRoles.');
        }

        if (requestParameters.fk === null || requestParameters.fk === undefined) {
            throw new runtime.RequiredError('fk','Required parameter requestParameters.fk was null or undefined when calling accountPrototypeUpdateByIdRoles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/roles/{fk}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"fk"}}`, encodeURIComponent(String(requestParameters.fk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * Mettez à jour un élément lié par id pour roles.
     */
    async accountPrototypeUpdateByIdRoles(requestParameters: AccountPrototypeUpdateByIdRolesRequest): Promise<Role> {
        const response = await this.accountPrototypeUpdateByIdRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Trigger user\'s identity verification with configured verifyOptions
     */
    async accountPrototypeVerifyRaw(requestParameters: AccountPrototypeVerifyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountPrototypeVerify.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Accounts/{id}/verify`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trigger user\'s identity verification with configured verifyOptions
     */
    async accountPrototypeVerify(requestParameters: AccountPrototypeVerifyRequest): Promise<void> {
        await this.accountPrototypeVerifyRaw(requestParameters);
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     */
    async accountReplaceByIdPostAccountsidReplaceRaw(requestParameters: AccountReplaceByIdPostAccountsidReplaceRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountReplaceByIdPostAccountsidReplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}/replace`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     */
    async accountReplaceByIdPostAccountsidReplace(requestParameters: AccountReplaceByIdPostAccountsidReplaceRequest): Promise<Account> {
        const response = await this.accountReplaceByIdPostAccountsidReplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     */
    async accountReplaceByIdPutAccountsidRaw(requestParameters: AccountReplaceByIdPutAccountsidRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountReplaceByIdPutAccountsid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     */
    async accountReplaceByIdPutAccountsid(requestParameters: AccountReplaceByIdPutAccountsidRequest): Promise<Account> {
        const response = await this.accountReplaceByIdPutAccountsidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     */
    async accountReplaceOrCreatePostAccountsReplaceOrCreateRaw(requestParameters: AccountReplaceOrCreatePostAccountsReplaceOrCreateRequest): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/replaceOrCreate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     */
    async accountReplaceOrCreatePostAccountsReplaceOrCreate(requestParameters: AccountReplaceOrCreatePostAccountsReplaceOrCreateRequest): Promise<Account> {
        const response = await this.accountReplaceOrCreatePostAccountsReplaceOrCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     */
    async accountReplaceOrCreatePutAccountsRaw(requestParameters: AccountReplaceOrCreatePutAccountsRequest): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     */
    async accountReplaceOrCreatePutAccounts(requestParameters: AccountReplaceOrCreatePutAccountsRequest): Promise<Account> {
        const response = await this.accountReplaceOrCreatePutAccountsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Reset password for a user with email.
     */
    async accountResetPasswordRaw(requestParameters: AccountResetPasswordRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.options === null || requestParameters.options === undefined) {
            throw new runtime.RequiredError('options','Required parameter requestParameters.options was null or undefined when calling accountResetPassword.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.options as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset password for a user with email.
     */
    async accountResetPassword(requestParameters: AccountResetPasswordRequest): Promise<void> {
        await this.accountResetPasswordRaw(requestParameters);
    }

    /**
     * Reset user\'s password via a password-reset token.
     */
    async accountSetPasswordRaw(requestParameters: AccountSetPasswordRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UNKNOWN_BASE_TYPE === null || requestParameters.UNKNOWN_BASE_TYPE === undefined) {
            throw new runtime.RequiredError('UNKNOWN_BASE_TYPE','Required parameter requestParameters.UNKNOWN_BASE_TYPE was null or undefined when calling accountSetPassword.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.UNKNOWN_BASE_TYPE),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset user\'s password via a password-reset token.
     */
    async accountSetPassword(requestParameters: AccountSetPasswordRequest): Promise<void> {
        await this.accountSetPasswordRaw(requestParameters);
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     */
    async accountUpdateAllRaw(requestParameters: AccountUpdateAllRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     */
    async accountUpdateAll(requestParameters: AccountUpdateAllRequest): Promise<InlineResponse2002> {
        const response = await this.accountUpdateAllRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     */
    async accountUpsertWithWhereRaw(requestParameters: AccountUpsertWithWhereRequest): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Accounts/upsertWithWhere`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     */
    async accountUpsertWithWhere(requestParameters: AccountUpsertWithWhereRequest): Promise<Account> {
        const response = await this.accountUpsertWithWhereRaw(requestParameters);
        return await response.value();
    }

}
