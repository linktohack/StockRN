// tslint:disable
/**
 * stock-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountToJSON,
    EntreeSortie,
    EntreeSortieFromJSON,
    EntreeSortieToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    Produit,
    ProduitFromJSON,
    ProduitToJSON,
    UNKNOWN_BASE_TYPE,
    UNKNOWN_BASE_TYPEFromJSON,
    UNKNOWN_BASE_TYPEToJSON,
} from '../models';

export interface EntreeSortieCountRequest {
    where?: string;
}

export interface EntreeSortieCreateRequest {
    data?: EntreeSortie;
}

export interface EntreeSortieCreateChangeStreamGetEntreeSortiesChangeStreamRequest {
    options?: string;
}

export interface EntreeSortieCreateChangeStreamPostEntreeSortiesChangeStreamRequest {
    UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE;
}

export interface EntreeSortieDeleteByIdRequest {
    id: string;
}

export interface EntreeSortieExistsGetEntreeSortiesidExistsRequest {
    id: string;
}

export interface EntreeSortieExistsHeadEntreeSortiesidRequest {
    id: string;
}

export interface EntreeSortieFindRequest {
    filter?: string;
}

export interface EntreeSortieFindByIdRequest {
    id: string;
    filter?: string;
}

export interface EntreeSortieFindOneRequest {
    filter?: string;
}

export interface EntreeSortiePatchOrCreateRequest {
    data?: EntreeSortie;
}

export interface EntreeSortiePrototypeGetAccountRequest {
    id: string;
    refresh?: boolean;
}

export interface EntreeSortiePrototypeGetProduitRequest {
    id: string;
    refresh?: boolean;
}

export interface EntreeSortiePrototypePatchAttributesRequest {
    id: string;
    data?: EntreeSortie;
}

export interface EntreeSortieReplaceByIdPostEntreeSortiesidReplaceRequest {
    id: string;
    data?: EntreeSortie;
}

export interface EntreeSortieReplaceByIdPutEntreeSortiesidRequest {
    id: string;
    data?: EntreeSortie;
}

export interface EntreeSortieReplaceOrCreatePostEntreeSortiesReplaceOrCreateRequest {
    data?: EntreeSortie;
}

export interface EntreeSortieReplaceOrCreatePutEntreeSortiesRequest {
    data?: EntreeSortie;
}

export interface EntreeSortieUpdateAllRequest {
    where?: string;
    data?: EntreeSortie;
}

export interface EntreeSortieUpsertWithWhereRequest {
    where?: string;
    data?: EntreeSortie;
}

/**
 * no description
 */
export class EntreeSortieApi extends runtime.BaseAPI {

    /**
     * Count instances of the model matched by where from the data source.
     */
    async entreeSortieCountRaw(requestParameters: EntreeSortieCountRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Count instances of the model matched by where from the data source.
     */
    async entreeSortieCount(requestParameters: EntreeSortieCountRequest): Promise<InlineResponse200> {
        const response = await this.entreeSortieCountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     */
    async entreeSortieCreateRaw(requestParameters: EntreeSortieCreateRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     */
    async entreeSortieCreate(requestParameters: EntreeSortieCreateRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortieCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a change stream.
     */
    async entreeSortieCreateChangeStreamGetEntreeSortiesChangeStreamRaw(requestParameters: EntreeSortieCreateChangeStreamGetEntreeSortiesChangeStreamRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.options !== undefined) {
            queryParameters['options'] = requestParameters.options;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/change-stream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Create a change stream.
     */
    async entreeSortieCreateChangeStreamGetEntreeSortiesChangeStream(requestParameters: EntreeSortieCreateChangeStreamGetEntreeSortiesChangeStreamRequest): Promise<Blob> {
        const response = await this.entreeSortieCreateChangeStreamGetEntreeSortiesChangeStreamRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a change stream.
     */
    async entreeSortieCreateChangeStreamPostEntreeSortiesChangeStreamRaw(requestParameters: EntreeSortieCreateChangeStreamPostEntreeSortiesChangeStreamRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties/change-stream`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.UNKNOWN_BASE_TYPE),
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Create a change stream.
     */
    async entreeSortieCreateChangeStreamPostEntreeSortiesChangeStream(requestParameters: EntreeSortieCreateChangeStreamPostEntreeSortiesChangeStreamRequest): Promise<Blob> {
        const response = await this.entreeSortieCreateChangeStreamPostEntreeSortiesChangeStreamRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     */
    async entreeSortieDeleteByIdRaw(requestParameters: EntreeSortieDeleteByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortieDeleteById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     */
    async entreeSortieDeleteById(requestParameters: EntreeSortieDeleteByIdRequest): Promise<object> {
        const response = await this.entreeSortieDeleteByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check whether a model instance exists in the data source.
     */
    async entreeSortieExistsGetEntreeSortiesidExistsRaw(requestParameters: EntreeSortieExistsGetEntreeSortiesidExistsRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortieExistsGetEntreeSortiesidExists.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/{id}/exists`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Check whether a model instance exists in the data source.
     */
    async entreeSortieExistsGetEntreeSortiesidExists(requestParameters: EntreeSortieExistsGetEntreeSortiesidExistsRequest): Promise<InlineResponse2001> {
        const response = await this.entreeSortieExistsGetEntreeSortiesidExistsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check whether a model instance exists in the data source.
     */
    async entreeSortieExistsHeadEntreeSortiesidRaw(requestParameters: EntreeSortieExistsHeadEntreeSortiesidRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortieExistsHeadEntreeSortiesid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Check whether a model instance exists in the data source.
     */
    async entreeSortieExistsHeadEntreeSortiesid(requestParameters: EntreeSortieExistsHeadEntreeSortiesidRequest): Promise<InlineResponse2001> {
        const response = await this.entreeSortieExistsHeadEntreeSortiesidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     */
    async entreeSortieFindRaw(requestParameters: EntreeSortieFindRequest): Promise<runtime.ApiResponse<Array<EntreeSortie>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntreeSortieFromJSON));
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     */
    async entreeSortieFind(requestParameters: EntreeSortieFindRequest): Promise<Array<EntreeSortie>> {
        const response = await this.entreeSortieFindRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find a model instance by {{id}} from the data source.
     */
    async entreeSortieFindByIdRaw(requestParameters: EntreeSortieFindByIdRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortieFindById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Find a model instance by {{id}} from the data source.
     */
    async entreeSortieFindById(requestParameters: EntreeSortieFindByIdRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortieFindByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     */
    async entreeSortieFindOneRaw(requestParameters: EntreeSortieFindOneRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/findOne`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     */
    async entreeSortieFindOne(requestParameters: EntreeSortieFindOneRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortieFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     */
    async entreeSortiePatchOrCreateRaw(requestParameters: EntreeSortiePatchOrCreateRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     */
    async entreeSortiePatchOrCreate(requestParameters: EntreeSortiePatchOrCreateRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortiePatchOrCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Extrait la relation belongsTo account.
     */
    async entreeSortiePrototypeGetAccountRaw(requestParameters: EntreeSortiePrototypeGetAccountRequest): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortiePrototypeGetAccount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.refresh !== undefined) {
            queryParameters['refresh'] = requestParameters.refresh;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/{id}/account`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Extrait la relation belongsTo account.
     */
    async entreeSortiePrototypeGetAccount(requestParameters: EntreeSortiePrototypeGetAccountRequest): Promise<Account> {
        const response = await this.entreeSortiePrototypeGetAccountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Extrait la relation belongsTo produit.
     */
    async entreeSortiePrototypeGetProduitRaw(requestParameters: EntreeSortiePrototypeGetProduitRequest): Promise<runtime.ApiResponse<Produit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortiePrototypeGetProduit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.refresh !== undefined) {
            queryParameters['refresh'] = requestParameters.refresh;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/EntreeSorties/{id}/produit`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProduitFromJSON(jsonValue));
    }

    /**
     * Extrait la relation belongsTo produit.
     */
    async entreeSortiePrototypeGetProduit(requestParameters: EntreeSortiePrototypeGetProduitRequest): Promise<Produit> {
        const response = await this.entreeSortiePrototypeGetProduitRaw(requestParameters);
        return await response.value();
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     */
    async entreeSortiePrototypePatchAttributesRaw(requestParameters: EntreeSortiePrototypePatchAttributesRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortiePrototypePatchAttributes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     */
    async entreeSortiePrototypePatchAttributes(requestParameters: EntreeSortiePrototypePatchAttributesRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortiePrototypePatchAttributesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     */
    async entreeSortieReplaceByIdPostEntreeSortiesidReplaceRaw(requestParameters: EntreeSortieReplaceByIdPostEntreeSortiesidReplaceRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortieReplaceByIdPostEntreeSortiesidReplace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties/{id}/replace`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     */
    async entreeSortieReplaceByIdPostEntreeSortiesidReplace(requestParameters: EntreeSortieReplaceByIdPostEntreeSortiesidReplaceRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortieReplaceByIdPostEntreeSortiesidReplaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     */
    async entreeSortieReplaceByIdPutEntreeSortiesidRaw(requestParameters: EntreeSortieReplaceByIdPutEntreeSortiesidRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling entreeSortieReplaceByIdPutEntreeSortiesid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     */
    async entreeSortieReplaceByIdPutEntreeSortiesid(requestParameters: EntreeSortieReplaceByIdPutEntreeSortiesidRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortieReplaceByIdPutEntreeSortiesidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     */
    async entreeSortieReplaceOrCreatePostEntreeSortiesReplaceOrCreateRaw(requestParameters: EntreeSortieReplaceOrCreatePostEntreeSortiesReplaceOrCreateRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties/replaceOrCreate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     */
    async entreeSortieReplaceOrCreatePostEntreeSortiesReplaceOrCreate(requestParameters: EntreeSortieReplaceOrCreatePostEntreeSortiesReplaceOrCreateRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortieReplaceOrCreatePostEntreeSortiesReplaceOrCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     */
    async entreeSortieReplaceOrCreatePutEntreeSortiesRaw(requestParameters: EntreeSortieReplaceOrCreatePutEntreeSortiesRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     */
    async entreeSortieReplaceOrCreatePutEntreeSorties(requestParameters: EntreeSortieReplaceOrCreatePutEntreeSortiesRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortieReplaceOrCreatePutEntreeSortiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     */
    async entreeSortieUpdateAllRaw(requestParameters: EntreeSortieUpdateAllRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     */
    async entreeSortieUpdateAll(requestParameters: EntreeSortieUpdateAllRequest): Promise<InlineResponse2002> {
        const response = await this.entreeSortieUpdateAllRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     */
    async entreeSortieUpsertWithWhereRaw(requestParameters: EntreeSortieUpsertWithWhereRequest): Promise<runtime.ApiResponse<EntreeSortie>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/EntreeSorties/upsertWithWhere`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntreeSortieToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntreeSortieFromJSON(jsonValue));
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     */
    async entreeSortieUpsertWithWhere(requestParameters: EntreeSortieUpsertWithWhereRequest): Promise<EntreeSortie> {
        const response = await this.entreeSortieUpsertWithWhereRaw(requestParameters);
        return await response.value();
    }

}
